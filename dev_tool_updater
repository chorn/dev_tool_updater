#!/usr/bin/env bash

#-----------------------------------------------------------------------------
declare dtu_base=$(
  _program="$0"
  case "$_program" in
    (*/*) ;;
    (*) _program=$(command -v -- "$0")
  esac
  [[ -L "$_program" ]] && _program=$(readlink "$_program")
  cd -P -- "$(dirname -- "$_program")" && pwd -P
)

declare dtu_updaters_path="$dtu_base/updaters"
#-----------------------------------------------------------------------------
if [[ ! -d "$dtu_updaters_path" ]] ; then
  echo "$0 could not find '$dtu_updaters_path'"
  exit 1
fi
#-----------------------------------------------------------------------------
parse_config() {
  local _file="$1"
  [[ -s "$_file" ]] || return

  local _pretty
  local _blank='^\s*$'
  local _comment='^\s*#'

  mapfile -t _raw_config < "$_file"

  # for i in {0..${#_raw_config[@]}} ; do
  for (( i = 0 ; i <= ${#_raw_config[@]} ; i++ )) ; do
    local _line="${_raw_config[$i]}"

    [[ "$_line" =~ $_blank ]] && continue
    [[ "$_line" =~ $_comment ]] && continue

    if [[ "$_line" =~ ^[[:space:]]*([^[:space:]]+)[[:space:]]*:.*$ ]] ; then
      _pretty="${BASH_REMATCH[1]}"
    elif [[ "$_line" =~ ^[[:space:]]*([^#[:space:]]+)[[:space:]]*.*$ ]] ; then
      _configs[$_pretty]="${_configs[$_pretty]} ${BASH_REMATCH[1]}"
      _configs[$_pretty]="${_configs[$_pretty]## }"
    fi
  done
}

#-----------------------------------------------------------------------------
usage() {
  cat <<USAGE
Usage: ${0##*/} <command> [command...]
  COMMANDS:
  all     Run all updates
USAGE

  for _script in ${updaters[@]} ; do
    echo -n '  '
    pretty "$_script"
  done

  exit 1
}
#-----------------------------------------------------------------------------
broken() {
  local _script="$1"

  echo "$_script doesn't appear to define an 'updater' function"
  exit 1
}
#-----------------------------------------------------------------------------
pretty() {
  local _script="$1"
  local _name=$(basename "$_script")
  [[ "${_name:2:1}" == '_' ]] && _name="${_name:3}"
  echo "${_name%%.sh}"
}
#-----------------------------------------------------------------------------
run_one() {
  local _script="$1"
  local _output_style="$2"
  local _pretty=$(pretty "$_script")

  if [[ ! -s "$_script" ]] ; then
    echo "$_script is missing or empty."
    exit 1
  fi

  unset -f updater
  unset tools

  [[ -n "${_configs[$_pretty]}" ]] && mapfile -d ' ' -t tools < <(echo -n "${_configs[$_pretty]}")

  source "$_script"
  declare -fp updater >&/dev/null || broken "$_script"

  case "$_output_style" in
    tabbed)
      _tmp=$(mktemp)
      echo -ne "$_pretty \t>>\t"

      if updater "$_script" >&"$_tmp" ; then
        echo 'ok'
      else
        echo 'err'
        [[ -s "$_tmp" ]] && cat "$_tmp"
      fi

      rm "$_tmp"
      ;;
    quiet)
      updater >& /dev/null
      ;;
    *)
      updater
      ;;
  esac
}
#-----------------------------------------------------------------------------
run_all() {
  for _script in ${updaters[@]} ; do
    run_one "$_script" tabbed
  done
}
#-----------------------------------------------------------------------------
declare -a updaters=$(find -s "$dtu_updaters_path" -type f -name '*.sh')
declare -A _configs
parse_config "$HOME/.dtu"
#-----------------------------------------------------------------------------

[[ $# -gt 0 ]] || usage

for _command in "$@" ; do
  case "$_command" in
    -h|help) usage ;;
    all) run_all ;;
    *) run_one "$dtu_updaters_path/"??"_${_command}.sh" ;;
  esac
done
