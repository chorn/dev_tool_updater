#!/bin/bash
#-----------------------------------------------------------------------------
declare dtu_base=$(
  _program="$0"
  case "$_program" in
    (*/*) ;;
    (*) _program=$(command -v -- "$0")
  esac
  [[ -L "$_program" ]] && _program=$(readlink "$_program")
  cd -P -- "$(dirname -- "$_program")" && pwd -P
)
declare dtu_updaters_path="$dtu_base/updaters"
declare -a updaters=$(find "$dtu_updaters_path" -type f -name '*.sh' | sort)
declare -a temp_files
#-----------------------------------------------------------------------------
pretty() {
  local _script="$1"
  local _name=$(basename "$_script")
  [[ "${_name:2:1}" == '_' ]] && _name="${_name:3}"
  echo "${_name%%.sh}"
}
#-----------------------------------------------------------------------------
usage() {
  if [[ ! -d "$dtu_updaters_path" ]] ; then
    echo "FATAL: '$dtu_updaters_path' not found."
  elif [[ ${#updaters[@]} -eq 0 ]] ; then
    echo "FATAL: No scripts in '$dtu_updaters_path'"
  fi

  cat <<USAGE
Usage: ${0##*/} [options] <command> [command...]

  OPTIONS:
  -h, --help      This.
  -q, --quiet     Run each updater with no output.
  -t, --terse     Run each updater with terse, ok/error style output.
  -v, --verbose   Run each updater with their natural output level.

  COMMANDS:
  all             Run all the updaters.
USAGE

  for _script in ${updaters[@]} ; do
    echo -n '  '
    pretty "$_script"
  done
  exit 1
}
#-----------------------------------------------------------------------------
parse_config() {
  local _file="$1"
  local _only="$2"
  [[ -n "$_only" ]] || return
  [[ -s "$_file" ]] || return

  local _pretty
  local _blank='^\s*$'
  local _comment='^\s*#'

  local -a _config

  while read -r _line ; do
    [[ "$_line" =~ $_blank ]] && continue
    [[ "$_line" =~ $_comment ]] && continue

    if [[ "$_line" =~ ^[[:space:]]*([^[:space:]]+)[[:space:]]*:.*$ ]] ; then
      _pretty="${BASH_REMATCH[1]}"
    elif [[ "$_line" =~ ^[[:space:]]*([^#[:space:]]+)[[:space:]]*.*$ ]] ; then
      [[ "$_only" == "$_pretty" ]] && _config+=(${BASH_REMATCH[1]})
    fi
  done < "$_file"

  echo "${_config[@]}"
}
#-----------------------------------------------------------------------------
broken() {
  local _script="$1"

  echo "$_script doesn't appear to define an 'updater' function"
  exit 1
}
#-----------------------------------------------------------------------------
run_one() {
  local _script="$1"
  local _output_style="$2"
  local _pretty=$(pretty "$_script")

  [[ ! -s "$_script" ]] && usage

  source "$_script"
  declare -f updater >&/dev/null || broken "$_script"
  local -a tools=($(parse_config "$HOME/.dtu" "$_pretty"))
  local outfile=$(mktemp -t DTU.XXXXX)
  temp_files+=($outfile)
  local console="/dev/null"

  case "$_output_style" in
    terse)
      echo -ne "$_pretty \t>>\t"
      ;;
    verbose)
      echo "Running updater $_pretty ($_script)"
      console="/dev/stdout"
      ;;
  esac

  updater 2>&1 | tee "$outfile" &>${console}

  local status=${PIPESTATUS[0]}

  [[ "$_output_style" == 'terse' ]] || return

  case $status in
    0) echo 'ok' ;;
    86) echo 'not present' ;;
    *)
      echo 'err'
      [[ -s "$outfile" ]] && cat "$outfile"
      ;;
  esac
}
#-----------------------------------------------------------------------------
run_all() {
  local _output_style="$1"

  for _script in ${updaters[@]} ; do
    run_one "$_script" "$_output_style"
  done
}
#-----------------------------------------------------------------------------
main() {
  [[ ${#updaters[@]} -eq 0 || $# -eq 0 ]] && usage

  local _output_style
  for _command in "$@" ; do
    case "$_command" in
      -h|help) usage ;;
      -t|--terse) _output_style='terse' ;;
      -q|--quiet) _output_style='quiet' ;;
      -v|--verbose) _output_style='verbose' ;;
      all) run_all "${_output_style:-terse}" ;;
      *) run_one "$dtu_updaters_path/"??"_${_command}.sh" ${_output_style} ;;
    esac
  done
}
#-----------------------------------------------------------------------------
cleanup() {
  local _exit_code="$1"
  [[ -n "$_exit_code" ]] || _exit_code=0

  for f in ${temp_files[@]} ; do
    [[ -f "$f" ]] && rm "$f"
  done

  exit "$_exit_code"
}
#-----------------------------------------------------------------------------
trap cleanup 0 1
main $@
wait
#-----------------------------------------------------------------------------
